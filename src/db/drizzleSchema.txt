import { pgTable, serial, text, uuid, timestamp, boolean, pgEnum, uniqueIndex } from "drizzle-orm/pg-core";

// Enums
export const skill_status = pgEnum("skill_status", [
  "to_study",
  "studying",
  "to_review",
  "mastered",
]);

export const feed_type = pgEnum("feed_type", [
  "new_item",
  "status_updated",
  "note_added",
]);

// Profiles
export const profiles = pgTable("profiles", {
  id: uuid("id").primaryKey().defaultRandom(),
  user_id: uuid("user_id").unique().references("auth.users.id", { onDelete: "cascade" }),
  username: text("username").unique().notNull(),
  email: text("email").notNull(),
  bio: text("bio"),
  avatar_url: text("avatar_url"),
  created_at: timestamp("created_at").defaultNow(),
});

// Categories
export const categories = pgTable("categories", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: text("name").unique().notNull(),
  slug: text("slug").unique().notNull(),
  color: text("color"),
  creator_id: uuid("creator_id").references("auth.users.id"),
  is_public: boolean("is_public").default(true),
  created_at: timestamp("created_at").defaultNow(),
});

// Skills
export const skills = pgTable("skills", {
  id: uuid("id").primaryKey().defaultRandom(),
  title: text("title").unique().notNull(),
  description: text("description"),
  link: text("link"),
  category_id: uuid("category_id").references(categories.id),
  creator_id: uuid("creator_id").references("auth.users.id"),
  created_at: timestamp("created_at").defaultNow(),
});

// UserSkills
export const user_skills = pgTable("user_skills", {
  id: uuid("id").primaryKey().defaultRandom(),
  user_id: uuid("user_id").references("auth.users.id", { onDelete: "cascade" }),
  skill_id: uuid("skill_id").references(skills.id, { onDelete: "cascade" }),
  status: skill_status("status").notNull().default("to_study"),
  notes: text("notes"),
  started_at: timestamp("started_at"),
  completed_at: timestamp("completed_at"),
  created_at: timestamp("created_at").defaultNow(),
  updated_at: timestamp("updated_at").defaultNow(),
}, (table) => ({
  uniqueUserSkill: uniqueIndex("user_skill_unique").on(table.user_id, table.skill_id),
}));

// Feeds
export const feeds = pgTable("feeds", {
  id: uuid("id").primaryKey().defaultRandom(),
  user_id: uuid("user_id").references("auth.users.id", { onDelete: "cascade" }),
  type: feed_type("type").notNull(),
  skill_id: uuid("skill_id").references(skills.id),
  created_at: timestamp("created_at").defaultNow(),
});

// Follows
export const follows = pgTable("follows", {
  followed_id: uuid("followed_id").references("auth.users.id", { onDelete: "cascade" }),
  follower_id: uuid("follower_id").references("auth.users.id", { onDelete: "cascade" }),
  created_at: timestamp("created_at").defaultNow(),
}, (table) => ({
  pk: uniqueIndex("follows_pk").on(table.followed_id, table.follower_id),
}));

// Messages
export const messages = pgTable("messages", {
  id: uuid("id").primaryKey().defaultRandom(),
  sender_id: uuid("sender_id").references("auth.users.id", { onDelete: "cascade" }),
  receiver_id: uuid("receiver_id").references("auth.users.id", { onDelete: "cascade" }),
  content: text("content").notNull(),
  is_read: boolean("is_read").default(false),
  created_at: timestamp("created_at").defaultNow(),
  updated_at: timestamp("updated_at").defaultNow(),
});

// Notes
export const notes = pgTable("notes", {
  id: uuid("id").primaryKey().defaultRandom(),
  user_id: uuid("user_id").references("auth.users.id", { onDelete: "cascade" }),
  skill_id: uuid("skill_id").references(skills.id, { onDelete: "cascade" }),
  content: text("content").notNull(),
  created_at: timestamp("created_at").defaultNow(),
});
